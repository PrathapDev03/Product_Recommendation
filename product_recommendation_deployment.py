# -*- coding: utf-8 -*-
"""Product_Recommendation_Deployment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DtzPJLF22agEa3HzKZJaoYGLsr24HPW3
"""

#!pip install streamlit

import pandas as pd
import streamlit as st
import pickle
import warnings
warnings.filterwarnings('ignore')

model = pickle.load(open('/content/sample_data/Product_Recommendation.pkl','rb'))
model

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.cluster import KMeans, AgglomerativeClustering, DBSCAN
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.sparse import csr_matrix
import pickle


st.title("üõí Product Recommendation & Clustering System")

# Automatic file loading
uploaded_file = "/content/sample_data/ratings.csv"

try:
    df = pd.read_csv(uploaded_file)
    st.write(df)
except FileNotFoundError:
    st.error(f"File not found at: {uploaded_file}")

if uploaded_file:
    data = pd.read_csv(uploaded_file, names=['user_id', 'product_id', 'rating', 'timestamp'])

    # Drop timestamp
    data = data.drop('timestamp', axis=1)
    data["Num_Ratings_By_User"] = data.groupby("user_id")["rating"].transform("count")
    data["Num_Ratings_By_Item"] = data.groupby("product_id")["rating"].transform("count")

    # Filter data
    filtered_data = data[(data['Num_Ratings_By_User'] >= 30) & (data['Num_Ratings_By_Item'] >= 30)]
    matrix = filtered_data.pivot(index='user_id', columns='product_id', values='rating').fillna(0)

    # Sparse matrix
    sparse_matrix = csr_matrix(matrix.values)



    st.subheader("üî• Top 10 Rated Products")
    top_products = filtered_data['product_id'].value_counts().head(10)
    fig2, ax2 = plt.subplots()
    sns.barplot(x=top_products.index, y=top_products.values, ax=ax2)
    ax2.set_xticklabels(ax2.get_xticklabels(), rotation=90)
    st.pyplot(fig2)

    st.subheader("üîç Explore Product Similarity")
    cosine_sim = cosine_similarity(matrix.T)
    cosine_df = pd.DataFrame(cosine_sim, index=matrix.columns, columns=matrix.columns)

    selected_product = st.selectbox("Select a Product ID to see similar products", matrix.columns)
    if selected_product:
        st.write("Top 5 similar products:")
        st.dataframe(cosine_df[selected_product].sort_values(ascending=False)[1:6])